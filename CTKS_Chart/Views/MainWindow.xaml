<Window
  x:Class="CTKS_Chart.Views.MainWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:controls="clr-namespace:VCore.WPF.Controls;assembly=VCore.WPF"
  xmlns:converters="clr-namespace:VCore.WPF.Converters;assembly=VCore.WPF"
  xmlns:converters1="clr-namespace:CTKS_Chart.Converters"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:logger="clr-namespace:Logger;assembly=Logger"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  Title="MainWindow"
  Width="1370"
  Height="1100"
  Background="{StaticResource BackgroudBrush}"
  FontFamily="pack://application:,,,/VCore.WPF;component/Resources/Fonts/Roboto/#Roboto"
  Style="{StaticResource {x:Type Window}}"
  WindowStartupLocation="CenterScreen"
  mc:Ignorable="d">

  <Window.Resources>
    <ResourceDictionary>
      <Style TargetType="Canvas">
        <Setter Property="ClipToBounds" Value="True" />
      </Style>

      <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="#ccc" />
      </Style>

      <Style
        x:Key="PositionText"
        BasedOn="{StaticResource {x:Type TextBlock}}"
        TargetType="TextBlock">
        <Setter Property="Margin" Value="0,0,15,0" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
      </Style>

    </ResourceDictionary>


  </Window.Resources>

  <Grid Margin="0" DataContext="{Binding TradingBotViewModel}">
    <Grid.RowDefinitions>
      <RowDefinition Height="auto" />
      <RowDefinition />
    </Grid.RowDefinitions>

    <Border Background="{StaticResource BackgroudGradientBrush}">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="auto" />
          <RowDefinition />
        </Grid.RowDefinitions>

        <Menu VerticalAlignment="Center" Background="Transparent">
          <MenuItem Header="Settings">

            <MenuItem Header="Default">
              <Border Padding="10">
                <UniformGrid Columns="1">
                  <StackPanel Margin="5" Orientation="Horizontal">
                    <Button
                      Width="120"
                      Margin="10,0,10,0"
                      Command="{Binding ShowLines}">
                      Show lines
                    </Button>
                    <Button
                      Width="120"
                      Margin="10,0,10,0"
                      Command="{Binding ShowIntersections}">
                      Show intersections
                    </Button>

                    <Button
                      Width="120"
                      Margin="10,0,10,0"
                      Command="{Binding ResetBot}">
                      Reset Bot
                    </Button>




                  </StackPanel>

                  <StackPanel
                    Margin="5"
                    DataContext="{Binding DrawingViewModel}"
                    Orientation="Horizontal">
                    <TextBox
                      Width="80"
                      Margin="10,0,10,0"
                      Text="{Binding MaxValue}" />
                    <TextBox
                      Width="80"
                      Margin="10,0,10,0"
                      Text="{Binding MinValue}" />

                    <TextBox
                      Width="50"
                      Margin="10,0,10,0"
                      Text="{Binding CandleCount}" />
                  </StackPanel>

                  <StackPanel
                    Margin="5"
                    DataContext="{Binding DrawingViewModel}"
                    Orientation="Horizontal">
                    <StackPanel Orientation="Horizontal">
                      <TextBlock VerticalAlignment="Center" Text="Min buy % " />
                      <TextBox
                        Width="40"
                        Margin="10,0,10,0"
                        Text="{Binding TradingBot.Strategy.MinBuyPrice}" />

                    </StackPanel>



                    <CheckBox
                      Width="120"
                      Margin="10,0,10,0"
                      IsChecked="{Binding ShowAveragePrice}">
                      Show Average Price
                    </CheckBox>


                    <CheckBox
                      Width="120"
                      Margin="10,0,10,0"
                      IsChecked="{Binding ShowATH}">
                      Show All Time High Price
                    </CheckBox>

                  </StackPanel>
                </UniformGrid>
              </Border>
            </MenuItem>

            <MenuItem DataContext="{Binding DrawingViewModel}" Header="Color">
              <Border Padding="10">
                <Grid>
                  <ItemsControl ItemsSource="{Binding ColorScheme.ColorSettings}">
                    <ItemsControl.ItemTemplate>
                      <DataTemplate>
                        <Grid Margin="10,10">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                          </Grid.ColumnDefinitions>
                          <TextBlock Margin="5,0,20,0" Text="{Binding Key}" />

                          <Grid Grid.Column="1" DataContext="{Binding Value}">
                            <controls:PathButton
                              x:Name="color_picker_toggle"
                              Width="20"
                              Height="18"
                              HorizontalAlignment="Right"
                              Background="{Binding Brush}"
                              BorderCheckedColor="{StaticResource DefaultRedColor}"
                              BorderDefaultColor="#454545"
                              BorderHoverColor="{StaticResource DefaultRedColor}"
                              BorderThickness="2"
                              EnableBorderAnimation="True" />

                            <Popup IsOpen="{Binding Path=IsChecked, ElementName=color_picker_toggle}" StaysOpen="False">
                              <xctk:ColorCanvas
                                Background="#151515"
                                BorderBrush="#45ffffff"
                                BorderThickness="1"
                                SelectedColor="{Binding Brush, Converter={converters:StringToColorConverter}}" />
                            </Popup>
                          </Grid>

                        </Grid>
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>
                </Grid>
              </Border>
            </MenuItem>
          </MenuItem>

          <MenuItem Header="Actions">
            <MenuItem Command="{Binding FetchMissingInfo}" Header="Fetch missing info" />
          </MenuItem>

          <MenuItem
            Command="{Binding OpenStatistics}"
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="{StaticResource chart-line}" />

          <MenuItem
            Command="{Binding OpenAssetSetting}"
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="{StaticResource circle-dollar}" />

          <MenuItem
            Command="{Binding OpenArchitectView}"
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="" />
        </Menu>

        <Grid Grid.Row="1" Margin="5">
          <ItemsControl ItemsSource="{Binding Layouts}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal" />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <Border>
                  <Button Command="{Binding DataContext.TradingBotViewModel.ShowCanvas, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}">
                    <TextBlock FontSize="15" Text="{Binding Title}" />

                    <Button.Style>
                      <Style TargetType="Button">
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                              <Border
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">
                                <ContentPresenter />
                              </Border>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>

                        <Setter Property="Background" Value="#15ffffff" />

                        <Setter Property="Padding" Value="15,5" />
                        <Setter Property="Margin" Value="0,0,5,0" />
                        <Setter Property="FontWeight" Value="SemiBold" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Foreground" Value="{StaticResource DefaultWhiteBrush}" />

                        <Style.Triggers>
                          <DataTrigger Binding="{Binding IsOutDated}" Value="True">
                            <Setter Property="Background" Value="#f25e5e" />
                          </DataTrigger>

                          <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#35ffffff" />
                          </Trigger>
                        </Style.Triggers>


                      </Style>
                    </Button.Style>
                  </Button>
                </Border>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>

        </Grid>

      </Grid>

    </Border>

    <Grid Grid.Row="1">
      <Grid.RowDefinitions>
        <RowDefinition Height="2*" />
        <RowDefinition Height="auto" />
        <RowDefinition Height="*" MinHeight="50" />
      </Grid.RowDefinitions>


      <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <Border Background="#ff05080d" MouseWheel="Border_MouseWheel">
          <ContentControl Content="{Binding MainGrid}" />
        </Border>

        <Border VerticalAlignment="Top">
          <Grid DataContext="{Binding TradingBot.Strategy}">
            <Grid.RowDefinitions>
              <RowDefinition Height="auto" />
              <RowDefinition Height="auto" />
            </Grid.RowDefinitions>

            <Border Padding="0,5,0,5" Background="#6005080d">
              <StackPanel Orientation="Horizontal">
                <StackPanel.Resources>
                  <Style BasedOn="{StaticResource PositionText}" TargetType="TextBlock">
                    <Setter Property="Foreground" Value="#55ffffff" />
                    <Setter Property="Margin" Value="5.25,0" />
                    <Setter Property="FontSize" Value="13" />
                  </Style>
                </StackPanel.Resources>

                <TextBlock Text="{Binding DataContext.TradingBotViewModel.ActiveTime, StringFormat={}{0:dd\\:hh\\:mm\\:ss}, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" ToolTip="Active time" />
                <TextBlock
                  Foreground="{StaticResource YellowBrush}"
                  Text="{Binding TotalValue, StringFormat={}{0:N2} $}"
                  ToolTip="Total value" />

                <TextBlock
                  Foreground="{StaticResource GreenBrush3}"
                  Text="{Binding TotalProfit, StringFormat={}{0:N2} $}"
                  ToolTip="Profit" />

                <TextBlock
                  Foreground="{StaticResource BlueBrush}"
                  Text="{Binding Budget, StringFormat={}{0:N2} $}"
                  ToolTip="Budget" />



                <TextBlock
                  Foreground="{StaticResource YellowBrush3}"
                  Text="{Binding TotalNativeAsset}"
                  ToolTip="Native asset size" />

                <TextBlock
                  Foreground="{StaticResource MagentaBrush}"
                  Text="{Binding TotalNativeAssetValue, StringFormat={}{0:N2} $}"
                  ToolTip="Native asset value $" />

                <StackPanel Orientation="Horizontal">
                  <TextBlock Text="{Binding TotalActualProfit, StringFormat={}{0:N2} $}" ToolTip="Total Actual Profit">
                    <TextBlock.Style>
                      <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">

                        <Style.Triggers>
                          <DataTrigger Binding="{Binding TotalActualProfit, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                          </DataTrigger>
                          <DataTrigger Binding="{Binding TotalActualProfit, Converter={converters:IsGreaterConverter}, ConverterParameter=0}" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Style>
                  </TextBlock>
                </StackPanel>

                <TextBlock
                  FontSize="10"
                  Text="{Binding AvrageBuyPrice}"
                  ToolTip="Average buy price" />

                <TextBlock
                  FontSize="10"
                  Foreground="{StaticResource YellowBrush3}"
                  Text="{Binding TotalExpectedProfit, StringFormat={}{0:N2} $}"
                  ToolTip="Total expected profit" />

                <TextBlock
                  DataContext="{Binding DataContext.TradingBotViewModel, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}"
                  FontSize="10"
                  Text="{Binding DailyChange, StringFormat={}{0:N2} $}"
                  ToolTip="Daily PnL">
                  <TextBlock.Style>
                    <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">

                      <Style.Triggers>
                        <DataTrigger Binding="{Binding DailyChange, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                          <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DailyChange, Converter={converters:IsGreaterConverter}, ConverterParameter=0}" Value="true">
                          <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>
                </TextBlock>

                <TextBlock
                  DataContext="{Binding DataContext.TradingBotViewModel, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}"
                  FontSize="10"
                  Text="{Binding FromAllTimeHigh, StringFormat={}{0:N2} $}"
                  ToolTip="From All Time High">
                  <TextBlock.Style>
                    <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">

                      <Style.Triggers>
                        <DataTrigger Binding="{Binding FromAllTimeHigh, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                          <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding FromAllTimeHigh, Converter={converters:IsGreaterConverter}, ConverterParameter=0}" Value="true">
                          <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>
                </TextBlock>

                <controls:PathButton
                  x:Name="show_positions_toggle"
                  Margin="5,0,0,0"
                  Glyph="{StaticResource square-poll-horizontal}"
                  GlyphFontSize="18"
                  IconCheckedColor="{StaticResource YellowColor}"
                  IconDefaultColor="{StaticResource YellowColor}"
                  IconHoverColor="{StaticResource YellowColor}" />


                <Popup
                  IsOpen="{Binding ElementName=show_positions_toggle, Path=IsChecked, Mode=TwoWay}"
                  Placement="Bottom"
                  PlacementTarget="{Binding ElementName=show_positions_toggle}"
                  StaysOpen="False">
                  <Border Padding="5" Background="#101010">
                    <StackPanel Orientation="Vertical">
                      <CheckBox
                        Margin="0,5"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        DataContext="{Binding DataContext.TradingBotViewModel.DrawingViewModel, RelativeSource={RelativeSource AncestorType=Window}}"
                        IsChecked="{Binding ShowAutoPositions}">
                        Show auto positions
                      </CheckBox>


                      <CheckBox
                        Margin="0,5"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        DataContext="{Binding DataContext.TradingBotViewModel.DrawingViewModel, RelativeSource={RelativeSource AncestorType=Window}}"
                        IsChecked="{Binding ShowManualPositions}">
                        Show manual positions
                      </CheckBox>

                    </StackPanel>
                  </Border>

                </Popup>

              </StackPanel>
            </Border>

            <Grid Grid.Row="1">
              <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
              </Grid.RowDefinitions>

              <ListView Background="#6005080d" ItemsSource="{Binding DataContext.TradingBotViewModel.LayoutIntervals.View, RelativeSource={RelativeSource AncestorType=Window}}">
                <ListView.ItemsPanel>
                  <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                  </ItemsPanelTemplate>
                </ListView.ItemsPanel>

                <ListView.ItemContainerStyle>
                  <Style BasedOn="{StaticResource ListViewItemStyle}" TargetType="ListViewItem">
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="ListViewItem">
                          <Border Padding="5,2">
                            <ContentPresenter />
                          </Border>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </ListView.ItemContainerStyle>

                <ListView.ItemTemplate>
                  <DataTemplate>
                    <TextBlock Cursor="Hand" Text="{Binding Model.Title}">
                      <TextBlock.Style>
                        <Style TargetType="TextBlock">
                          <Setter Property="Foreground" Value="#15ffffff" />


                          <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                              <Setter Property="Foreground" Value="{StaticResource YellowBrush}" />
                            </Trigger>

                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                              <Setter Property="Foreground" Value="{StaticResource YellowBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </TextBlock.Style>
                    </TextBlock>
                  </DataTemplate>
                </ListView.ItemTemplate>
              </ListView>

              <Border
                Grid.Row="1"
                Margin="5,0"
                HorizontalAlignment="Left"
                Background="#cc050505">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition />
                  </Grid.RowDefinitions>

                  <controls:PathButton
                    x:Name="show_positions_size_toggle"
                    Margin="0,10"
                    Content="Show position size"
                    ForegroundCheckedColor="#ccc"
                    Glyph="{StaticResource square-poll-horizontal}"
                    GlyphFontSize="18"
                    IconCheckedColor="{StaticResource YellowColor}"
                    IconDefaultColor="{StaticResource YellowColor}"
                    IconHoverColor="{StaticResource YellowColor}" />

                  <Border
                    Grid.Row="1"
                    Margin="2,0,0,0"
                    Padding="10,0,0,5"
                    Background="#cc050505"
                    BorderBrush="#50ffffff"
                    BorderThickness="1">
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="auto" />
                      </Grid.ColumnDefinitions>

                      <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="auto" />
                      </Grid.RowDefinitions>

                      <ItemsControl Margin="0,5" ItemsSource="{Binding PositionSizeMapping}">
                        <ItemsControl.ItemTemplate>
                          <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                              <TextBlock Style="{StaticResource {x:Type TextBlock}}" Text="{Binding Key}" />
                              <TextBlock
                                Margin="10,0,0,0"
                                Style="{StaticResource {x:Type TextBlock}}"
                                Text="{Binding Value, StringFormat={}{0:N2}}" />
                            </StackPanel>

                          </DataTemplate>
                        </ItemsControl.ItemTemplate>
                      </ItemsControl>

                      <controls:PathButton
                        Grid.Row="0"
                        Grid.Column="1"
                        Margin="10,10"
                        Padding="0"
                        VerticalAlignment="Top"
                        Command="{Binding DataContext.TradingBotViewModel.OpenPositionSize, RelativeSource={RelativeSource AncestorType=Window}}"
                        Glyph="{StaticResource pencil-glyph}"
                        IconHoverColor="{StaticResource YellowColor}"
                        IconMargin="0"
                        IsReadOnly="True" />


                      <TextBlock
                        Grid.Row="1"
                        Grid.Column="0"
                        Text="{Binding ScaleSize, StringFormat={}{0} x}" />

                      <TextBox
                        Grid.Row="2"
                        Grid.Column="0"
                        Width="70"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding MaxBuyPrice, UpdateSourceTrigger=LostFocus}"
                        ToolTip="Maximum BUY price" />


                      <TextBox
                        Grid.Row="3"
                        Grid.Column="0"
                        Width="70"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding MinSellPrice, UpdateSourceTrigger=LostFocus}"
                        ToolTip="Minimum SELL price" />

                      <TextBox
                        Grid.Row="4"
                        Grid.Column="0"
                        Width="70"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding AutomaticPositionSize, UpdateSourceTrigger=LostFocus}"
                        ToolTip="Automatic position size * W1 position size" />

                      <TextBlock
                        Grid.Row="4"
                        Grid.Column="1"
                        Width="70"
                        Margin="-20,0,0,0"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Text="{Binding AutomaticPositionSizeValue, StringFormat={}{0:N2}}"
                        ToolTip="Max Automatic Budget" />


                      <TextBox
                        Grid.Row="5"
                        Grid.Column="0"
                        Width="70"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding MaxAutomaticBudget, UpdateSourceTrigger=LostFocus}"
                        ToolTip="Max Automatic Budget" />




                      <StackPanel
                        Grid.Row="2"
                        Grid.Column="1"
                        Margin="-30,0,0,0"
                        Orientation="Horizontal">
                        <controls:PathButton
                          VerticalAlignment="Center"
                          Focusable="True"
                          Glyph="{StaticResource floppy-disk-glyph}"
                          IconHoverColor="{StaticResource BlueColor}"
                          IconMargin="5 0"
                          IsReadOnly="True"
                          ToolTip="Save MAX BUY PRICE" />

                        <controls:PathButton
                          VerticalAlignment="Center"
                          Command="{Binding DataContext.TradingBotViewModel.ClearMaxBuyPrice, RelativeSource={RelativeSource AncestorType=Window}}"
                          Glyph="{StaticResource xmark-glyph}"
                          IconHoverColor="{StaticResource DefaultRedColor}"
                          IconMargin="0"
                          IsReadOnly="True"
                          ToolTip="Clear MAX BUY PRICE" />
                      </StackPanel>

                      <StackPanel
                        Grid.Row="3"
                        Grid.Column="1"
                        Margin="-30,0,0,0"
                        Orientation="Horizontal">
                        <controls:PathButton
                          VerticalAlignment="Center"
                          Focusable="True"
                          Glyph="{StaticResource floppy-disk-glyph}"
                          IconHoverColor="{StaticResource BlueColor}"
                          IconMargin="5 0"
                          IsReadOnly="True"
                          ToolTip="Save MAX BUY PRICE" />

                        <controls:PathButton
                          VerticalAlignment="Center"
                          Command="{Binding DataContext.TradingBotViewModel.ClearMinSellPrice, RelativeSource={RelativeSource AncestorType=Window}}"
                          Glyph="{StaticResource xmark-glyph}"
                          IconHoverColor="{StaticResource DefaultRedColor}"
                          IconMargin="0"
                          IsReadOnly="True"
                          ToolTip="Clear MAX BUY PRICE" />
                      </StackPanel>

                    </Grid>

                    <Border.Style>
                      <Style TargetType="Border">
                        <Setter Property="Visibility" Value="Collapsed" />

                        <Style.Triggers>
                          <DataTrigger Binding="{Binding ElementName=show_positions_size_toggle, Path=IsChecked}" Value="true">
                            <Setter Property="Visibility" Value="Visible" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </Border.Style>
                  </Border>

                </Grid>

              </Border>

            </Grid>
          </Grid>
        </Border>


      </Grid>

      <GridSplitter
        Grid.Row="1"
        Height="3"
        Margin="2,0,2,0"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Center"
        Background="{StaticResource 30_WhiteTransparentBrush}" />

      <Grid Grid.Row="2">
        <Grid.RowDefinitions>
          <RowDefinition Height="2*" />
          <RowDefinition Height="auto" />
          <RowDefinition Height="*" MinHeight="50" />
        </Grid.RowDefinitions>

        <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
          <Border.Style>
            <Style TargetType="Border">
              <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.TradingBotViewModel.IsSimulation, RelativeSource={RelativeSource AncestorType=Window}}" Value="true">
                  <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Border.Style>

          <Grid>
            <TabControl Background="Transparent" DataContext="{Binding TradingBot.Strategy, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
              <TabControl.Resources>
                <Style TargetType="GroupBox">
                  <Setter Property="MaxHeight" Value="200" />
                  <Setter Property="Margin" Value="5" />
                </Style>

                <DataTemplate x:Key="OppsitePositions">

                  <StackPanel Orientation="Horizontal">
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding ShortId}" />
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" />
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding Price}" />
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding OriginalPositionSizeNative}" />
                    <TextBlock
                      Width="70"
                      Style="{StaticResource PositionText}"
                      Text="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" />

                    <TextBlock
                      Foreground="{StaticResource GreenBrush}"
                      Style="{StaticResource PositionText}"
                      Text="{Binding Profit, StringFormat={}{0:N3} $}" />
                    <TextBlock
                      Foreground="{StaticResource LightRedBrush}"
                      Style="{StaticResource PositionText}"
                      Text="{Binding Fees, StringFormat={}{0:N3} $}" />

                  </StackPanel>

                </DataTemplate>

                <DataTemplate x:Key="Trades">
                  <TextBlock
                    Margin="10,2,0,5"
                    Cursor="Hand"
                    FontFamily="{StaticResource FontAwesome6Pro_Regular}"
                    Foreground="#55ffffff"
                    Style="{StaticResource PositionText}"
                    Text="{StaticResource square-poll-horizontal}">
                    <TextBlock.ToolTip>
                      <Grid>
                        <ItemsControl ItemTemplate="{StaticResource OppsitePositions}" ItemsSource="{Binding OpositPositions}" />
                      </Grid>
                    </TextBlock.ToolTip>
                  </TextBlock>
                </DataTemplate>
              </TabControl.Resources>

              <TabItem Header="Actual positions">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <TextBlock Text="{Binding ActualPositions}" />

                  <DataGrid
                    x:Name="ActualPositions"
                    Grid.Row="1"
                    AutoGenerateColumns="False"
                    CanUserAddRows="False"
                    CanUserDeleteRows="False"
                    CanUserReorderColumns="False"
                    IsReadOnly="True"
                    ItemsSource="{Binding ActualPositions}"
                    ScrollViewer.VerticalScrollBarVisibility="Auto">

                    <DataGrid.Columns>
                      <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                      <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM HH:mm:ss}}" Header="Filled Date" />

                      <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                        <DataGridTextColumn.CellStyle>
                          <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                            <Setter Property="Content" Value="Left" />
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                              </DataTrigger>
                              <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </DataGridTextColumn.CellStyle>
                      </DataGridTextColumn>

                      <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                      <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                      <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                      <DataGridTextColumn Binding="{Binding ActualProfit, StringFormat={}{0:N2} $}" Header="Act. profit">
                        <DataGridTextColumn.CellStyle>
                          <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding ActualProfit, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                              </DataTrigger>
                              <DataTrigger Binding="{Binding ActualProfit, Converter={converters:IsGreaterConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </DataGridTextColumn.CellStyle>
                      </DataGridTextColumn>

                      <DataGridTextColumn
                        Binding="{Binding ExpectedProfit, StringFormat={}{0:N2} $}"
                        Foreground="{StaticResource YellowBrush3}"
                        Header="Exp. profit">
                        <DataGridTextColumn.CellStyle>
                          <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                            <Setter Property="HorizontalContentAlignment" Value="Left" />

                          </Style>
                        </DataGridTextColumn.CellStyle>
                      </DataGridTextColumn>

                      <DataGridTextColumn Binding="{Binding TargetPrice}" Header="Target Price" />

                      <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />
                    </DataGrid.Columns>
                  </DataGrid>

                </Grid>
              </TabItem>


              <TabItem Header="Completed Trades">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding AllCompletedPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Filled Date" />
                    <DataGridTextColumn Binding="{Binding CompletedDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Completed Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTextColumn
                      Binding="{Binding TotalProfit, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource GreenBrush}"
                      Header="Total profit" />

                    <DataGridTextColumn
                      Binding="{Binding TotalFees, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource DefaultRedBrush}"
                      Header="Total Fees" />

                    <DataGridTextColumn
                      Binding="{Binding FinalProfit, StringFormat={}{0:N3} $}"
                      FontWeight="SemiBold"
                      Foreground="{StaticResource GreenBrush3}"
                      Header="Final profit" />

                    <DataGridTextColumn Binding="{Binding TargetPrice}" Header="Target Price" />

                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />


                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Open Buy">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding OpenBuyPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">
                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding CreatedDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Created Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />
                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Open Sell">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding OpenSellPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">
                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding CreatedDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Created Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />

                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Completed Sell">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding ClosedSellPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Filled Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTextColumn
                      Binding="{Binding Fees, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource DefaultRedBrush}"
                      Header="Fees" />

                    <DataGridTextColumn
                      Binding="{Binding Profit, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource GreenBrush}"
                      Header="Profit" />
                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />
                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Completed Buy">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding ClosedBuyPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Filled Date" />
                    <DataGridTextColumn Binding="{Binding State}" Header="State" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTextColumn
                      Binding="{Binding Fees, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource DefaultRedBrush}"
                      Header="Fees" />

                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />
                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Info">
                <Grid VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                  </Grid.RowDefinitions>

                  <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <UniformGrid
                      Width="280"
                      HorizontalAlignment="Left"
                      Columns="2">
                      <TextBlock Text="Total time" />
                      <TextBlock Text="{Binding DataContext.TradingBotViewModel.TotalRunTime, StringFormat={}{0:dd\\:hh\\:mm\\:ss}, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" />
                      <TextBlock Text="Active time" />
                      <TextBlock Text="{Binding DataContext.TradingBotViewModel.ActiveTime, StringFormat={}{0:dd\\:hh\\:mm\\:ss}, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" />
                      <TextBlock Text="Starting Budget" />
                      <TextBlock Text="{Binding StartingBudget, StringFormat={}{0:N2} $}" />
                      <TextBlock FontWeight="Bold" Text="Total Value" />
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Text="{Binding TotalValue, StringFormat={}{0:N2} $}" />

                      <TextBlock FontWeight="Bold" Text="Total Profit " />
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Text="{Binding TotalProfit, StringFormat={}{0:N2} $}" />
                      <TextBlock FontWeight="Bold" Text="Budget" />
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Text="{Binding Budget, StringFormat={}{0:N2} $}" />
                      <TextBlock Text="Avrage Buy Price " />
                      <TextBlock Text="{Binding AvrageBuyPrice}" />


                      <TextBlock Text="Total Native" />
                      <TextBlock Text="{Binding TotalNativeAsset}" />
                      <TextBlock Text="Total Native Value" />
                      <TextBlock Text="{Binding TotalNativeAssetValue, StringFormat={}{0:N2} $}" />

                      <TextBlock Text="Closed buy trades" />
                      <TextBlock Text="{Binding ClosedBuyPositions.Count, StringFormat={}{0}}" />
                      <TextBlock Text="Closed sell trades" />
                      <TextBlock Text="{Binding ClosedSellPositions.Count, StringFormat={}{0}}" />

                      <TextBlock Text="Total Sell" />
                      <TextBlock Text="{Binding TotalSell}" />
                      <TextBlock Text="Total Buy" />
                      <TextBlock Text="{Binding TotalBuy}" />

                      <TextBlock Text="Scale" />
                      <TextBlock Text="{Binding ScaleSize}" />
                    </UniformGrid>
                  </ScrollViewer>

                  <ItemsControl
                    Grid.Row="1"
                    Margin="0,5"
                    ItemsSource="{Binding PositionSizeMapping}">
                    <ItemsControl.ItemTemplate>
                      <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                          <TextBlock Style="{StaticResource {x:Type TextBlock}}" Text="{Binding Key}" />
                          <TextBlock
                            Margin="10,0,0,0"
                            Style="{StaticResource {x:Type TextBlock}}"
                            Text="{Binding Value, StringFormat={}{0:N2}}" />
                        </StackPanel>

                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>

                  <StackPanel Grid.Row="2" Orientation="Vertical">
                    <TextBlock Foreground="#36ffffff" Text="{Binding DataContext.TradingBotViewModel.BuildVersion, RelativeSource={RelativeSource AncestorType=Window}}" />
                  </StackPanel>
                </Grid>
              </TabItem>
            </TabControl>


          </Grid>

        </Border>

        <GridSplitter
          Grid.Row="1"
          Height="3"
          Margin="2,0,2,0"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Center"
          Background="{StaticResource 30_WhiteTransparentBrush}" />

        <Border
          Grid.Row="2"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Stretch">

          <Border.Style>
            <Style TargetType="Border">
              <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.TradingBotViewModel.IsSimulation, RelativeSource={RelativeSource AncestorType=Window}}" Value="true">
                  <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Border.Style>

          <DataGrid
            x:Name="Loggs"
            AutoGenerateColumns="False"
            ItemsSource="{Binding ConsoleCollectionLogger.Logs}">
            <DataGrid.CellStyle>
              <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Error}">
                    <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Warning}">
                    <Setter Property="Foreground" Value="{StaticResource YellowBrush}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Success}">
                    <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Success2}">
                    <Setter Property="Foreground" Value="{StaticResource MagentaBrush}" />
                  </DataTrigger>

                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Inform2}">
                    <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
              <DataGridTextColumn Binding="{Binding Time, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Time" />
              <DataGridTextColumn Binding="{Binding MessageType}" Header="Type" />
              <DataGridTextColumn Binding="{Binding Message}" Header="Message" />
            </DataGrid.Columns>
          </DataGrid>
        </Border>
      </Grid>
    </Grid>
  </Grid>
</Window>
