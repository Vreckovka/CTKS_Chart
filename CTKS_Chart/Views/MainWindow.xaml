<Window
  x:Class="CTKS_Chart.Views.MainWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:controls="clr-namespace:VCore.WPF.Controls;assembly=VCore.WPF"
  xmlns:converters="clr-namespace:VCore.WPF.Converters;assembly=VCore.WPF"
  xmlns:converters1="clr-namespace:CTKS_Chart.Converters"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:logger="clr-namespace:Logger;assembly=Logger"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:trading="clr-namespace:CTKS_Chart.Views.Trading"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  Title="{Binding Title}"
  Width="1370"
  Height="1100"
  Background="{StaticResource BackgroudBrush}"
  FontFamily="pack://application:,,,/VCore.WPF;component/Resources/Fonts/Roboto/#Roboto"
  Icon="{Binding Icon}"
  WindowStartupLocation="CenterScreen"
  mc:Ignorable="d">

  <Window.Resources>
    <ResourceDictionary>
      <Style TargetType="Canvas">
        <Setter Property="ClipToBounds" Value="True" />
      </Style>

      <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="#ccc" />
      </Style>

      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Views/Dictionaries/BotDictionary.xaml" />
      </ResourceDictionary.MergedDictionaries>

    </ResourceDictionary>
  </Window.Resources>

  <Window.Style>
    <Style BasedOn="{StaticResource {x:Type Window}}" TargetType="Window" />
  </Window.Style>

  <Grid Margin="0" DataContext="{Binding TradingBotViewModel}">
    <Grid.RowDefinitions>
      <RowDefinition Height="auto" />
      <RowDefinition />
    </Grid.RowDefinitions>

    <Border Background="{StaticResource BackgroudGradientBrush}">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="auto" />
          <RowDefinition />
        </Grid.RowDefinitions>

        <Menu
          Grid.Row="1"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Center"
          Background="Transparent"
          WindowChrome.IsHitTestVisibleInChrome="True">
          <MenuItem
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="">

            <MenuItem Header="Default">
              <Border Padding="10">
                <UniformGrid Columns="1">

                  <StackPanel
                    Margin="5"
                    DataContext="{Binding DrawingViewModel.DrawingSettings}"
                    Orientation="Horizontal">
                    <CheckBox
                      Width="120"
                      Margin="10,0,10,0"
                      IsChecked="{Binding ShowAveragePrice}">
                      Show Average Price
                    </CheckBox>


                    <CheckBox
                      Width="120"
                      Margin="10,0,10,0"
                      IsChecked="{Binding ShowATH}">
                      Show All Time High Price
                    </CheckBox>
                  </StackPanel>

                  <ComboBox
                    Margin="10,0,10,0"
                    DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=Window}}"
                    ItemsSource="{Binding BotType, Converter={converters:EnumValueToCollectionConverter}, Mode=OneTime}"
                    SelectedItem="{Binding BotType}" />

                  <StackPanel Margin="5" Orientation="Horizontal">
                    <Button
                      Width="120"
                      Margin="10,0,10,0"
                      Command="{Binding ResetBot}">
                      Reset Bot
                    </Button>


                  </StackPanel>


                  <StackPanel
                    Margin="5"
                    DataContext="{Binding DrawingViewModel}"
                    Orientation="Horizontal">
                    <StackPanel Orientation="Horizontal">
                      <TextBlock VerticalAlignment="Center" Text="Min buy % " />
                      <TextBox
                        Width="40"
                        Margin="10,0,10,0"
                        Text="{Binding TradingBot.Strategy.MinBuyPrice}" />

                    </StackPanel>
                  </StackPanel>
                </UniformGrid>
              </Border>
            </MenuItem>

            <MenuItem DataContext="{Binding DrawingViewModel}" Header="Color">
              <Border Padding="10">
                <Grid>
                  <ItemsControl ItemsSource="{Binding ColorScheme.ColorSettings}">
                    <ItemsControl.ItemTemplate>
                      <DataTemplate>
                        <Grid Margin="10,10">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                          </Grid.ColumnDefinitions>
                          <TextBlock Margin="5,0,20,0" Text="{Binding Key}" />

                          <Grid Grid.Column="1" DataContext="{Binding Value}">
                            <controls:PathButton
                              x:Name="color_picker_toggle"
                              Width="20"
                              Height="18"
                              HorizontalAlignment="Right"
                              Background="{Binding Brush}"
                              BorderCheckedColor="{StaticResource DefaultRedColor}"
                              BorderDefaultColor="#454545"
                              BorderHoverColor="{StaticResource DefaultRedColor}"
                              BorderThickness="2"
                              EnableBorderAnimation="True" />

                            <Popup IsOpen="{Binding Path=IsChecked, ElementName=color_picker_toggle}" StaysOpen="False">
                              <xctk:ColorCanvas
                                Background="#151515"
                                BorderBrush="#45ffffff"
                                BorderThickness="1"
                                SelectedColor="{Binding Brush, Converter={converters:StringToColorConverter}}" />
                            </Popup>
                          </Grid>

                        </Grid>
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>
                </Grid>
              </Border>
            </MenuItem>
          </MenuItem>

          <MenuItem
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="">
            <MenuItem Command="{Binding FetchMissingInfo}" Header="Fetch missing info" />
          </MenuItem>

          <MenuItem
            Command="{Binding OpenStatistics}"
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="{StaticResource chart-line}"
            ToolTip="Statistics" />

          <MenuItem
            Command="{Binding OpenAssetSetting}"
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="{StaticResource circle-dollar}"
            ToolTip="Asset" />

          <MenuItem
            Command="{Binding OpenArchitectView}"
            Cursor="Hand"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header=""
            ToolTip="Architect" />

          <MenuItem
            Command="{Binding OpenTesting}"
            Cursor="Hand"
            DataContext="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext}"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header=""
            ToolTip="Testing">
            <MenuItem.Style>
              <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="MenuItem">
                <Setter Property="Visibility" Value="Collapsed" />

                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsDebug}" Value="True">
                    <Setter Property="Visibility" Value="Visible" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </MenuItem.Style>
          </MenuItem>

          <MenuItem
            Command="{Binding OpenAiTesting}"
            Cursor="Hand"
            DataContext="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext}"
            FontFamily="{StaticResource FontAwesome6Pro_Regular}"
            FontSize="19"
            Header="AI "
            ToolTip="Open Ai Testing">
            <MenuItem.Style>
              <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="MenuItem">
                <Setter Property="Visibility" Value="Collapsed" />

                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsDebug}" Value="True">
                    <Setter Property="Visibility" Value="Visible" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </MenuItem.Style>
          </MenuItem>

        </Menu>

        <Grid
          Grid.Row="0"
          Margin="0,5,0,2"
          HorizontalAlignment="Left"
          VerticalAlignment="Center">

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto" />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>

          <TextBlock
            Grid.Column="1"
            Margin="5,0"
            VerticalAlignment="Center"
            FontSize="10"
            Foreground="#25ffffff"
            Text="{Binding DataContext.TradingBotViewModel.ActiveTime, StringFormat={}{0:dd\\:hh\\:mm\\:ss}, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}"
            ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />

          <ItemsControl
            Margin="5,0"
            VerticalAlignment="Center"
            ItemsSource="{Binding Layouts}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal" />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <Border>
                  <TextBlock
                    Margin="0,0,5,0"
                    FontSize="10"
                    Text="{Binding Title}">
                    <TextBlock.Style>
                      <Style TargetType="TextBlock">

                        <Setter Property="FontWeight" Value="SemiBold" />
                        <Setter Property="Foreground" Value="#10ffffff" />
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding IsOutDated}" Value="True">
                            <Setter Property="Foreground" Value="#f25e5e" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Style>
                  </TextBlock>
                </Border>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </Grid>

      </Grid>

    </Border>

    <Grid Grid.Row="1">
      <Grid.RowDefinitions>
        <RowDefinition Height="3*" />
        <RowDefinition Height="auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>


      <trading:BotView />

      <GridSplitter
        Grid.Row="1"
        Height="3"
        Margin="2,0,2,0"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Center"
        Background="{StaticResource 30_WhiteTransparentBrush}" />

      <Grid Grid.Row="2">
        <Grid.RowDefinitions>
          <RowDefinition Height="2*" />
          <RowDefinition Height="auto" />
          <RowDefinition Height="*" MinHeight="50" />
        </Grid.RowDefinitions>

        <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
          <Border.Style>
            <Style TargetType="Border">
              <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.TradingBotViewModel.IsSimulation, RelativeSource={RelativeSource AncestorType=Window}}" Value="true">
                  <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Border.Style>

          <Grid>
            <TabControl Background="Transparent" DataContext="{Binding TradingBot.Strategy, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
              <TabControl.Resources>
                <Style TargetType="GroupBox">
                  <Setter Property="MaxHeight" Value="200" />
                  <Setter Property="Margin" Value="5" />
                </Style>

                <DataTemplate x:Key="OppsitePositions">

                  <StackPanel Orientation="Horizontal">
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding ShortId}" />
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" />
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding Price}" />
                    <TextBlock Style="{StaticResource PositionText}" Text="{Binding OriginalPositionSizeNative}" />
                    <TextBlock
                      Width="70"
                      Style="{StaticResource PositionText}"
                      Text="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" />

                    <TextBlock
                      Foreground="{StaticResource GreenBrush}"
                      Style="{StaticResource PositionText}"
                      Text="{Binding Profit, StringFormat={}{0:N3} $}" />
                    <TextBlock
                      Foreground="{StaticResource LightRedBrush}"
                      Style="{StaticResource PositionText}"
                      Text="{Binding Fees, StringFormat={}{0:N3} $}" />

                  </StackPanel>

                </DataTemplate>

                <DataTemplate x:Key="Trades">
                  <TextBlock
                    Margin="10,2,0,5"
                    Cursor="Hand"
                    FontFamily="{StaticResource FontAwesome6Pro_Regular}"
                    Foreground="#55ffffff"
                    Style="{StaticResource PositionText}"
                    Text="{StaticResource square-poll-horizontal}">
                    <TextBlock.ToolTip>
                      <Grid>
                        <ItemsControl ItemTemplate="{StaticResource OppsitePositions}" ItemsSource="{Binding OpositPositions}" />
                      </Grid>
                    </TextBlock.ToolTip>
                  </TextBlock>
                </DataTemplate>
              </TabControl.Resources>

              <TabItem Header="Actual positions">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <TextBlock Text="{Binding ActualPositions}" />

                  <DataGrid
                    x:Name="ActualPositions"
                    Grid.Row="1"
                    AutoGenerateColumns="False"
                    CanUserAddRows="False"
                    CanUserDeleteRows="False"
                    CanUserReorderColumns="False"
                    IsReadOnly="True"
                    ItemsSource="{Binding ActualPositions}"
                    ScrollViewer.VerticalScrollBarVisibility="Auto">

                    <DataGrid.Columns>
                      <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                      <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM HH:mm:ss}}" Header="Filled Date" />

                      <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                        <DataGridTextColumn.CellStyle>
                          <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                            <Setter Property="Content" Value="Left" />
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                              </DataTrigger>
                              <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </DataGridTextColumn.CellStyle>
                      </DataGridTextColumn>

                      <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                      <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                      <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                      <DataGridTextColumn Binding="{Binding ActualProfit, StringFormat={}{0:N2} $}" Header="Act. profit">
                        <DataGridTextColumn.CellStyle>
                          <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding ActualProfit, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                              </DataTrigger>
                              <DataTrigger Binding="{Binding ActualProfit, Converter={converters:IsGreaterConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </DataGridTextColumn.CellStyle>
                      </DataGridTextColumn>

                      <DataGridTextColumn
                        Binding="{Binding ExpectedProfit, StringFormat={}{0:N2} $}"
                        Foreground="{StaticResource YellowBrush3}"
                        Header="Exp. profit">
                        <DataGridTextColumn.CellStyle>
                          <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                            <Setter Property="HorizontalContentAlignment" Value="Left" />

                          </Style>
                        </DataGridTextColumn.CellStyle>
                      </DataGridTextColumn>

                      <DataGridTextColumn Binding="{Binding TargetPrice}" Header="Target Price" />

                      <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />
                    </DataGrid.Columns>
                  </DataGrid>

                </Grid>
              </TabItem>


              <TabItem Header="Completed Trades">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding AllCompletedPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Filled Date" />
                    <DataGridTextColumn Binding="{Binding CompletedDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Completed Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTextColumn
                      Binding="{Binding TotalProfit, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource GreenBrush}"
                      Header="Total profit" />

                    <DataGridTextColumn
                      Binding="{Binding TotalFees, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource DefaultRedBrush}"
                      Header="Total Fees" />

                    <DataGridTextColumn
                      Binding="{Binding FinalProfit, StringFormat={}{0:N3} $}"
                      FontWeight="SemiBold"
                      Foreground="{StaticResource GreenBrush3}"
                      Header="Final profit" />

                    <DataGridTextColumn Binding="{Binding TargetPrice}" Header="Target Price" />

                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />


                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Open Buy">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding OpenBuyPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">
                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding CreatedDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Created Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />
                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Open Sell">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding OpenSellPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">
                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding CreatedDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Created Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />

                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Completed Sell">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding ClosedSellPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Filled Date" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTextColumn
                      Binding="{Binding Fees, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource DefaultRedBrush}"
                      Header="Fees" />

                    <DataGridTextColumn
                      Binding="{Binding Profit, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource GreenBrush}"
                      Header="Profit" />
                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />
                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Completed Buy">
                <DataGrid
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding ClosedBuyPositions}"
                  ScrollViewer.VerticalScrollBarVisibility="Auto">

                  <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding ShortId}" Header="Id" />
                    <DataGridTextColumn Binding="{Binding IsAutomatic, Converter={converters1:PositionTypeConverter}}" Header="T">
                      <DataGridTextColumn.CellStyle>
                        <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                          <Setter Property="Content" Value="Left" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="false">
                              <Setter Property="Foreground" Value="{StaticResource OrangeBrush}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsAutomatic}" Value="true">
                              <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </DataGridTextColumn.CellStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Binding="{Binding FilledDate, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Filled Date" />
                    <DataGridTextColumn Binding="{Binding State}" Header="State" />
                    <DataGridTextColumn Binding="{Binding Price}" Header="Price" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSizeNative}" Header="Size" />
                    <DataGridTextColumn Binding="{Binding OriginalPositionSize, StringFormat={}{0:N2} $}" Header="Value" />

                    <DataGridTextColumn
                      Binding="{Binding Fees, StringFormat={}{0:N3} $}"
                      Foreground="{StaticResource DefaultRedBrush}"
                      Header="Fees" />

                    <DataGridTemplateColumn CellTemplate="{StaticResource Trades}" Header="Trades" />
                  </DataGrid.Columns>
                </DataGrid>
              </TabItem>

              <TabItem Header="Info">
                <Grid VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                  </Grid.RowDefinitions>

                  <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <UniformGrid
                      Width="210"
                      HorizontalAlignment="Left"
                      Columns="2">
                      <TextBlock Text="Total time" />
                      <TextBlock Text="{Binding DataContext.TradingBotViewModel.TotalRunTime, StringFormat={}{0:dd\\:hh\\:mm\\:ss}, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" />
                      <TextBlock Foreground="#55ffffff" Text="Active time" />
                      <TextBlock Foreground="#55ffffff" Text="{Binding DataContext.TradingBotViewModel.ActiveTime, StringFormat={}{0:dd\\:hh\\:mm\\:ss}, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" />

                      <TextBlock
                        FontWeight="Bold"
                        Foreground="{StaticResource BlueBrush}"
                        Text="Starting Budget" />
                      <TextBlock
                        FontWeight="Bold"
                        Foreground="{StaticResource BlueBrush}"
                        Text="{Binding StartingBudget, StringFormat={}{0:N2} $}" />


                      <TextBlock
                        FontWeight="Bold"
                        Foreground="{StaticResource YellowBrush}"
                        Text="Total Value" />
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Foreground="{StaticResource YellowBrush}"
                        Text="{Binding TotalValue, StringFormat={}{0:N2} $}" />

                      <TextBlock
                        FontWeight="Bold"
                        Foreground="{StaticResource GreenBrush3}"
                        Text="Total Profit " />
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Foreground="{StaticResource GreenBrush3}"
                        Text="{Binding TotalProfit, StringFormat={}{0:N2} $}" />



                      <TextBlock FontWeight="Bold" Text="Absolute Gain $">
                        <TextBlock.Style>
                          <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />

                            <Style.Triggers>
                              <DataTrigger Binding="{Binding AbosoluteGainValue, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </TextBlock.Style>
                      </TextBlock>
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Text="{Binding AbosoluteGainValue, StringFormat={}{0:N2} $}">
                        <TextBlock.Style>
                          <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />

                            <Style.Triggers>
                              <DataTrigger Binding="{Binding AbosoluteGainValue, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </TextBlock.Style>
                      </TextBlock>

                      <TextBlock FontWeight="Bold" Text="Absolute Gain">
                        <TextBlock.Style>
                          <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />

                            <Style.Triggers>
                              <DataTrigger Binding="{Binding AbosoluteGain, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </TextBlock.Style>
                      </TextBlock>
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Text="{Binding AbosoluteGain, StringFormat={}{0:N2} %}">
                        <TextBlock.Style>
                          <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />

                            <Style.Triggers>
                              <DataTrigger Binding="{Binding AbosoluteGain, Converter={converters:IsLesserConverter}, ConverterParameter=0}" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </TextBlock.Style>
                      </TextBlock>

                      <TextBlock
                        FontWeight="Bold"
                        Foreground="{StaticResource BlueBrush}"
                        Text="Budget" />
                      <TextBlock
                        FontSize="14"
                        FontWeight="Bold"
                        Foreground="{StaticResource BlueBrush}"
                        Text="{Binding Budget, StringFormat={}{0:N2} $}" />

                      <TextBlock Text="Total Native" />
                      <TextBlock Text="{Binding TotalNativeAsset}" />
                      <TextBlock Text="Total Native $" />
                      <TextBlock Text="{Binding TotalNativeAssetValue, StringFormat={}{0:N2} $}" />

                      <TextBlock Text="BUYS" />
                      <TextBlock Text="{Binding ClosedBuyPositions.Count, StringFormat={}{0}}" />
                      <TextBlock Text="SELLS" />
                      <TextBlock Text="{Binding ClosedSellPositions.Count, StringFormat={}{0}}" />

                      <TextBlock Foreground="{StaticResource DefaultRedBrush}" Text="Total Sell" />
                      <TextBlock Foreground="{StaticResource DefaultRedBrush}" Text="{Binding TotalSell}" />
                      <TextBlock Foreground="{StaticResource GreenBrush}" Text="Total Buy" />
                      <TextBlock Foreground="{StaticResource GreenBrush}" Text="{Binding TotalBuy}" />

                      <TextBlock Foreground="{StaticResource DefaultRedBrush}" Text="Total Fees" />
                      <TextBlock Foreground="{StaticResource DefaultRedBrush}" Text="{Binding TotalFees, StringFormat={}{0:N2} $}" />

                      <TextBlock Foreground="{StaticResource YellowBrush3}" Text="Turnover" />
                      <TextBlock Foreground="{StaticResource YellowBrush3}" Text="{Binding Turnover, StringFormat={}{0:N2} $}" />

                      <TextBlock Text="Scale" />
                      <TextBlock Text="{Binding ScaleSize}" />
                    </UniformGrid>
                  </ScrollViewer>


                  <StackPanel Grid.Row="2" Orientation="Vertical">
                    <TextBlock Foreground="#36ffffff" Text="{Binding DataContext.TradingBotViewModel.BuildVersion, RelativeSource={RelativeSource AncestorType=Window}}" />
                  </StackPanel>
                </Grid>
              </TabItem>
            </TabControl>


          </Grid>

        </Border>

        <GridSplitter
          Grid.Row="1"
          Height="3"
          Margin="2,0,2,0"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Center"
          Background="{StaticResource 30_WhiteTransparentBrush}" />

        <Border
          Grid.Row="2"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Stretch">

          <Border.Style>
            <Style TargetType="Border">
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsPaused}" Value="true">
                  <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Border.Style>

          <DataGrid
            x:Name="Loggs"
            AutoGenerateColumns="False"
            ItemsSource="{Binding ConsoleCollectionLogger.Logs}">
            <DataGrid.CellStyle>
              <Style BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="DataGridCell">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Error}">
                    <Setter Property="Foreground" Value="{StaticResource DefaultRedBrush}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Warning}">
                    <Setter Property="Foreground" Value="{StaticResource YellowBrush}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Success}">
                    <Setter Property="Foreground" Value="{StaticResource GreenBrush}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Success2}">
                    <Setter Property="Foreground" Value="{StaticResource MagentaBrush}" />
                  </DataTrigger>

                  <DataTrigger Binding="{Binding MessageType}" Value="{x:Static logger:MessageType.Inform2}">
                    <Setter Property="Foreground" Value="{StaticResource BlueBrush}" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
              <DataGridTextColumn Binding="{Binding Time, StringFormat={}{0:dd.MM.yy HH:mm:ss}}" Header="Time" />
              <DataGridTextColumn Binding="{Binding MessageType}" Header="Type" />
              <DataGridTextColumn Binding="{Binding Message}" Header="Message" />
            </DataGrid.Columns>
          </DataGrid>
        </Border>
      </Grid>
    </Grid>
  </Grid>
</Window>
